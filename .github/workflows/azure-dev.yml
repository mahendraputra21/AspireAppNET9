name: .NET 9 Aspire to Azure Deployment (DEV)

on:
  workflow_dispatch:
  push:
    branches:
     - master
     - main

# Global environment variables
env:
  AZURE_CLIENT_ID: ${{ vars.AZURE_CLIENT_ID }}
  AZURE_TENANT_ID: ${{ vars.AZURE_TENANT_ID }}
  AZURE_SUBSCRIPTION_ID: ${{ vars.AZURE_SUBSCRIPTION_ID }}
  AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS }}
  AZURE_ENV_NAME: ${{ vars.AZURE_ENV_NAME }}
  AZURE_LOCATION: ${{ vars.AZURE_LOCATION }}

permissions:
  id-token: write
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up .NET SDK 9.0 and Aspire Workload
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: '9.0.102'

      - name: Cache .NET dependencies
        uses: actions/cache@v3
        id: dotnet-cache
        with:
          path: |
            ~/.nuget/packages
            **/bin
            **/obj
          key: dotnet-${{ runner.os }}-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            dotnet-${{ runner.os }}-

      - name: Install azd
        uses: Azure/setup-azd@v0.1.0

      - name: Add azd to PATH
        run: echo "$HOME/.azd/bin" >> $GITHUB_PATH

      - name: Install .NET Aspire workload
        run: dotnet workload install aspire

      - name: Extract Solution Name
        id: extract_solution_name
        run: |
          SOLUTION_NAME=$(ls *.sln | sed 's/\.sln$//')
          echo "Solution Name: $SOLUTION_NAME"
          echo "SOLUTION_NAME=$SOLUTION_NAME" >> $GITHUB_ENV

      - name: Build Application
        run: dotnet build --configuration Release
        working-directory: ${{ env.SOLUTION_NAME }}.AppHost

      - name: Archive Build Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: ${{ env.SOLUTION_NAME }}.AppHost/bin/Release/net9.0/

  publish:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Download Build Artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifacts
          path: ${{ env.SOLUTION_NAME }}.AppHost/bin/Release/net9.0/

      - name: Extract Working Directory
        id: extract_working_dir
        run: |
          # Extract the parent directory of the build artifacts path
          WORKING_DIR=$(dirname "${{ env.SOLUTION_NAME }}.AppHost/bin/Release/net9.0/")
          echo "Working Directory: $WORKING_DIR"
          echo "WORKING_DIR=$WORKING_DIR" >> $GITHUB_ENV

      - name: Install azd
        uses: Azure/setup-azd@v0.1.0

      - name: Add azd to PATH
        run: echo "$HOME/.azd/bin" >> $GITHUB_PATH

      - name: Log in with Azure (Federated Credentials)
        if: ${{ env.AZURE_CLIENT_ID != '' }}
        run: |
          azd auth login \
            --client-id "$AZURE_CLIENT_ID" \
            --federated-credential-provider "github" \
            --tenant-id "$AZURE_TENANT_ID"

      - name: Log in with Azure (Client Credentials)
        if: ${{ env.AZURE_CREDENTIALS != '' }}
        run: |
          info=$(echo "$AZURE_CREDENTIALS" | jq -r '. | @base64')
          clientId=$(echo "$info" | base64 --decode | jq -r '.clientId')
          clientSecret=$(echo "$info" | base64 --decode | jq -r '.clientSecret')
          tenantId=$(echo "$info" | base64 --decode | jq -r '.tenantId')

          echo "::add-mask::$clientSecret"

          azd auth login \
            --client-id "$clientId" \
            --client-secret "$clientSecret" \
            --tenant-id "$tenantId"

      - name: Provision Infrastructure
        run: azd provision --no-prompt
        working-directory: ${{ env.WORKING_DIR }}

      - name: Refresh azd env (pulls latest infrastructure provision)
        run: azd env refresh --no-prompt
        env:
          AZURE_LOCATION: ${{ env.AZURE_LOCATION }}
        working-directory: ${{ env.WORKING_DIR }}

      - name: Deploy Application
        run: azd deploy --no-prompt
        working-directory: ${{ env.WORKING_DIR }}